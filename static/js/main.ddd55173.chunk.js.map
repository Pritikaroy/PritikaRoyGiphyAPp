{"version":3,"sources":["components/ZeroResult.js","components/Gif.js","components/GifBox.js","components/GifResult.js","components/Navigation.js","components/Options.js","components/Form.js","components/GifList.js","components/GifHome.js","App.js","serviceWorker.js","index.js"],"names":["ZeroResults","props","className","aria-hidden","Gif","src","url","alt","GifList","gifs","results","data","length","map","gif","images","fixed_height","key","id","ZeroResult","GifResult","state","searchTerm","loading","doSearch","term","axios","get","then","response","setState","catch","error","console","log","this","nextProps","GifBox","Component","Navigation","to","Options","Form","onSearchUpdate","e","target","value","handleSubmit","preventDefault","currentTarget","reset","searchWord","path","history","push","onSubmit","type","onChange","name","placeholder","required","withRouter","match","params","GifHome","App","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ddd55173.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ZeroResults = props => {\n    return (\n        <li className=\"notFound\">\n            <i className=\"fa fa-frown-o\" aria-hidden=\"true\" />\n            <h3>Zero Results Found</h3>\n            <p>Your search did not yield any results. Please try again.</p>\n        </li>\n    );\n};\n\nexport default ZeroResults;","import React from \"react\";\n\nconst Gif = props => {\n    return (\n        <li>\n            <img src={props.url} alt=\"\"/>\n        </li>\n    );\n};\n\nexport default Gif;\n","import React from \"react\";\n\nimport ZeroResult from \"./ZeroResult\";\nimport Gif from \"./Gif\";\n\nconst GifList = props => {\n    const results = props.data;\n    let gifs;\n    if (results.length > 0) {\n        gifs = results.map(gif => (\n            <Gif url={gif.images.fixed_height.url} key={gif.id} />\n        ));\n    } else {\n        gifs = <ZeroResult />;\n    }\n\n    return (\n        <div className=\"photoContainer\">\n            <h2>Results</h2>\n            <ul>{gifs}</ul>\n        </div>\n    );\n};\n\nexport default GifList;\n","\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport GifBox from \"./GifBox\";\n\nclass GifResult extends Component {\n    state = {\n        gifs: [],\n        searchTerm: \"\",\n        loading: true\n    };\n\n    componentDidMount(props) {\n        this.doSearch(\"Dance\");\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.term !== nextProps.term) {\n            this.doSearch(nextProps.term);\n        }\n    }\n\n    doSearch = term => {\n        axios\n            .get(\n                `https://api.giphy.com/v1/gifs/search?q=${term}&limit=20&api_key=54cdNcsWipTRqcDqrDlpXTcEDP4Ycul5`\n            )\n            .then(response => {\n                this.setState({\n                    gifs: response.data.data,\n                    searchTerm: term,\n                    loading: false\n                });\n            })\n            .catch(error => {\n                console.log(\"Error Happening!\", error);\n            });\n    };\n\n    render() {\n        return this.state.loading ? (\n            <p>Your choice of Gifs are on their way...</p>\n        ) : (\n                <GifBox data={this.state.gifs} term={this.state.searchTerm} />\n            );\n    }\n}\n\nexport default GifResult;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Navigation = props => {\n    return (\n        <nav className=\"mainNav\">\n            <ul>\n                <li>\n                    <NavLink to=\"/search/search\" className=\"fas fa-search\">Search</NavLink>\n                </li>\n                {/* <li>\n                    <NavLink to=\"/search/Puppies\">Puppies</NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"/search/Babies\">Babies</NavLink>\n                </li> */}\n            </ul>\n        </nav>\n    );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Options = props => {\n    return (\n        <nav className=\"mainNav\">\n            <ul>\n                <li>\n                    <NavLink to=\"/search/Puppies\" className=\"fas fa-paw\"></NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"/search/Babies\" className=\"fas fa-baby\"></NavLink>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Options;","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Form extends Component {\n    state = {\n        searchTerm: \"\"\n    };\n\n    onSearchUpdate = e => {\n        this.setState({ searchTerm: e.target.value });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        e.currentTarget.reset();\n        let searchWord = this.state.searchTerm;\n        let path = `${searchWord}`;\n        this.props.history.push(path);\n    };\n\n    render() {\n        return (\n            <form className=\"searchForm\" onSubmit={this.handleSubmit}>\n                <input\n                    type=\"search\"\n                    onChange={this.onSearchUpdate}\n                    name=\"search\"\n                    placeholder=\"Search for your favorite Gif here..\"\n                    required\n                />\n                <button type=\"submit\" className=\"fas fa-search\">\n                \n                </button>\n            </form>\n        );\n    }\n}\n\nexport default withRouter(Form);\n","import React from \"react\";\n\nimport GifResult from \"./GifResult\";\nimport Navigation from \"./Navigation\";\nimport Options from \"./Options\";\nimport Form from \"./Form\";\n\nconst GifList = (props, { match }) => {\n    let term = props.match.params.term;\n\n    return (\n        <div>\n            <h1>Search for you Gif:</h1>\n            <Form />\n            <Navigation />\n            <Options />\n            \n            <GifResult term={term} />\n        </div>\n    );\n};\n\nexport default GifList;\n","import React from \"react\";\n\nimport GifResult from \"./GifResult\";\nimport Navigation from \"./Navigation\";\nimport Options from \"./Options\";\n\n\nconst GifHome = (props, { match }) => {\n    let term = props.match.params.term;\n\n    return (\n        <div>\n            <h1>React Giphy Generator</h1>\n            <p>\n                Click the <strong>Search</strong> icon to begin searching for gifs\n            </p>\n            <Navigation />\n\n            <p>Or just </p>\n\n            <Options />\n            \n            <GifResult term={term} />\n\n            \n        </div>\n    );\n};\n\nexport default GifHome;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport GifList from \"./components/GifList\";\nimport GifHome from \"./components/GifHome\";\nimport ZeroResult from \"./components/ZeroResult\";\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={GifHome} />\n            <Route path=\"/search/:term\" component={GifList} />\n            <Route component={ZeroResult} />\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}